{"ast":null,"code":"import _defineProperty from \"/Users/preshin/Study/shoppingCart/shopping-cart/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/preshin/Study/shoppingCart/shopping-cart/src/contexts/StoreContext.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component, createContext } from 'react';\nexport const StoreContext = createContext();\n\nclass StoreContextProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      productsList: [],\n      cart: {\n        totalAmount: 0\n      }\n    };\n\n    this.updateProductList = productsList => {\n      this.setState({\n        productsList\n      });\n    };\n\n    this.addProduct = productId => {\n      const updatedProductList = this.state.productsList.map(product => {\n        if (product.productId === productId) {\n          return _objectSpread({}, product, {\n            count: product.count + 1\n          });\n        }\n\n        return product;\n      });\n      console.log('====================================');\n      console.log(updatedProductList);\n      console.log('====================================');\n    };\n  }\n\n  render() {\n    return React.createElement(StoreContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        updateProductList: this.updateProductList\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nexport default StoreContextProvider;","map":{"version":3,"sources":["/Users/preshin/Study/shoppingCart/shopping-cart/src/contexts/StoreContext.js"],"names":["React","Component","createContext","StoreContext","StoreContextProvider","state","productsList","cart","totalAmount","updateProductList","setState","addProduct","productId","updatedProductList","map","product","count","console","log","render","props","children"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AAEA,OAAO,MAAMC,YAAY,GAAGD,aAAa,EAAlC;;AAEP,MAAME,oBAAN,SAAmCH,SAAnC,CAA6C;AAAA;AAAA;AAAA,SAC3CI,KAD2C,GACnC;AACNC,MAAAA,YAAY,EAAE,EADR;AAENC,MAAAA,IAAI,EAAE;AACJC,QAAAA,WAAW,EAAE;AADT;AAFA,KADmC;;AAAA,SAQ3CC,iBAR2C,GAQtBH,YAAD,IAAgB;AAClC,WAAKI,QAAL,CAAc;AAACJ,QAAAA;AAAD,OAAd;AACD,KAV0C;;AAAA,SAY3CK,UAZ2C,GAY9BC,SAAD,IAAa;AACvB,YAAMC,kBAAkB,GAAG,KAAKR,KAAL,CAAWC,YAAX,CAAwBQ,GAAxB,CAA4BC,OAAO,IAAE;AAC9D,YAAGA,OAAO,CAACH,SAAR,KAAsBA,SAAzB,EAAmC;AACjC,mCAAYG,OAAZ;AAAqBC,YAAAA,KAAK,EAAED,OAAO,CAACC,KAAR,GAAgB;AAA5C;AACD;;AACD,eAAOD,OAAP;AACD,OAL0B,CAA3B;AAOAE,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYL,kBAAZ;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ;AACD,KAvB0C;AAAA;;AAyB3CC,EAAAA,MAAM,GAAG;AACP,WACE,oBAAC,YAAD,CAAc,QAAd;AAAuB,MAAA,KAAK,oBAAO,KAAKd,KAAZ;AAAmBI,QAAAA,iBAAiB,EAAE,KAAKA;AAA3C,QAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKW,KAAL,CAAWC,QADd,CADF;AAKD;;AA/B0C;;AAkC7C,eAAejB,oBAAf","sourcesContent":["import React, { Component, createContext } from 'react';\n\nexport const StoreContext = createContext();\n\nclass StoreContextProvider extends Component {\n  state = {\n    productsList: [],\n    cart: {\n      totalAmount: 0\n    }\n  }\n\n  updateProductList = (productsList)=>{\n    this.setState({productsList})\n  }\n\n  addProduct= (productId)=>{\n    const updatedProductList = this.state.productsList.map(product=>{\n      if(product.productId === productId){\n        return { ...product, count: product.count + 1 }\n      }\n      return product;\n    })\n\n    console.log('====================================');\n    console.log(updatedProductList);\n    console.log('====================================');\n  }\n\n  render() {\n    return (\n      <StoreContext.Provider value={{ ...this.state, updateProductList: this.updateProductList }}>\n        {this.props.children}\n      </StoreContext.Provider>\n    );\n  }\n}\n\nexport default StoreContextProvider;"]},"metadata":{},"sourceType":"module"}