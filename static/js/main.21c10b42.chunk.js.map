{"version":3,"sources":["contexts/StoreContext.js","components/AddToCart.js","components/Product.js","components/ProductsList.js","components/Checkout.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["StoreContext","createContext","StoreContextProvider","state","productsList","cart","totalAmount","quantity","displayModal","updateProductList","setState","closeModal","map","product","count","showModal","updateProductCount","productId","updateText","updatedProductList","calculateCheckout","forEach","mrf","Provider","value","this","props","children","Component","AddToCart","useContext","roundButtonStyle","backgroundColor","padding","borderRadius","className","onClick","style","Product","imageUrl","offerText","brandName","productName","price","src","alt","margin","color","fontWeight","ProductsList","fetch","headers","then","response","json","data","productDatawithCount","context","catch","err","console","log","height","overflow","key","contextType","Checkout","fontSize","Modal","id","display","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.21c10b42.chunk.js","sourcesContent":["import React, { Component, createContext } from 'react';\n\nexport const StoreContext = createContext();\n\nclass StoreContextProvider extends Component {\n  state = {\n    productsList: [],\n    cart: {\n      totalAmount: 0,\n      quantity: 0\n    },\n    displayModal: false\n  }\n\n  updateProductList = (productsList)=>{\n    this.setState({productsList})\n  }\n\n  closeModal = () =>{\n    this.setState({\n      displayModal: false,\n      productsList: this.state.productsList.map(product=>({...product, count: 0})),\n      cart: {\n        totalAmount: 0,\n        quantity: 0\n      }\n    });\n  }\n\n  showModal= ()=>{\n    if(this.state.cart.totalAmount > 0)\n    this.setState({displayModal: true})\n  }\n\n  updateProductCount = (productId, updateText)=>{\n    const updatedProductList = this.state.productsList.map(product=>{\n      if((product.productId === productId) && updateText === \"ADD\"){\n        return { ...product, count: product.count + 1 }\n      }\n      else if((product.productId === productId) && updateText === \"ADD_TO_CART\" && product.count === 0){\n        return { ...product, count: product.count + 1 }\n      }\n      else if((product.productId === productId) && product.count > 0 && updateText === \"SUB\"){\n        return { ...product, count: product.count - 1 }\n      }\n      return product;\n    })\n    this.calculateCheckout(updatedProductList);\n    this.setState({productsList: updatedProductList });\n  }\n\n  calculateCheckout = (updatedProductList)=>{\n    let totalAmount = 0;\n    let quantity = 0;\n    updatedProductList.forEach(product => {\n      if(product.count > 0){\n        totalAmount += product.count * product.mrf\n        quantity+= product.count\n      }\n    });\n    this.setState({cart:{ totalAmount, quantity }})\n  }\n\n  render() {\n    return (\n      <StoreContext.Provider value={{\n          ...this.state,\n          updateProductList: this.updateProductList,\n          updateProductCount: this.updateProductCount,\n          showModal: this.showModal,\n          closeModal: this.closeModal\n        }}>\n        {this.props.children}\n      </StoreContext.Provider>\n    );\n  }\n}\n\nexport default StoreContextProvider;","import React, { useContext } from 'react';\nimport { StoreContext } from '../contexts/StoreContext';\n\nconst AddToCart = (props)=> {\n  const { updateProductCount } = useContext(StoreContext);\n  const roundButtonStyle = {\n    backgroundColor: \"#4CAF50\",\n    padding: \"10px\",\n    borderRadius: \"50%\"\n  }\n  return (\n    <div className=\"row flex\">\n      <div className=\"col-6\">\n        <button className=\"button\" onClick={()=>updateProductCount(props.productId, \"ADD_TO_CART\")}>Add to Cart</button>\n      </div>\n      <div className=\"col-6\">\n        <div className=\"row flex\">\n          <div className=\"col-4\">\n          <button style={{...roundButtonStyle}} onClick={()=>updateProductCount(props.productId, \"ADD\")}>+</button>\n          </div>\n          <div className=\"col-4\">{props.count}</div>\n          <div className=\"col-4\">\n          <button style={{...roundButtonStyle}} onClick={()=>updateProductCount(props.productId, \"SUB\")}>-</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddToCart;","import React from 'react';\nimport AddToCart from './AddToCart';\n\nconst Product = (props)=>{\n  const {imageUrl, offerText, brandName, productName, price, mrf, quantity, count, productId} = props.product;\n  return (\n    <div className= \"row flex\">\n      <div className=\"col-3 col-s-1\" />\n      <div className=\"col-3 col-s-5 align-center border-line\">\n        <div className=\"row\">\n          <div className=\"col-12 col-s-12\">\n            <img src={imageUrl} alt=\"product\" />\n          </div>\n        </div>\n        <div className=\"row\">\n        <div className=\"col-12 col-s-12\">\n          <div>{offerText} OFF</div>\n        </div>\n      </div>\n      </div>\n      <div className=\"col-3 col-s-5 align-left border-line\" style={{margin: \"auto\"}}>\n        <h2 style={{ color: \"green\" }}>{brandName}</h2>\n        <p>{productName}</p>\n        <div>{quantity}</div>\n        <div>MRP {price}</div>\n        <div style={{fontWeight: 700}}>Rs {mrf}</div>\n        <AddToCart count={count} productId={productId} />\n      </div>\n      <div className=\"col-3 col-s-1\" />\n    </div>\n  );\n}\n\nexport default Product;","import React, { Component } from 'react';\nimport Product from './Product';\nimport { StoreContext } from '../contexts/StoreContext';\nclass ProductsList extends Component {\n  static contextType = StoreContext;\n\n  componentDidMount(){\n    fetch('http://localhost:5000/products', {\n      headers : { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n       }\n\n    })\n    .then((response) => response.json())\n    .then((data) => {\n      const productDatawithCount = data.map(product => ({...product, count: 0}))\n    this.context.updateProductList(productDatawithCount)\n    })\n    .catch(err => {\n      console.log(\"Error Reading data \" + err);\n    });\n  }\n\n  render() {\n    const {productsList} = this.context\n    return (\n      <div style={{height: \"90vh\", overflow: \"scroll\"}}>\n          {productsList && productsList.map(product=>\n            <Product product={product} key={product.productId}/>\n          )}\n          </div>\n     );\n  }\n}\n \nexport default ProductsList;","import React, { useContext } from 'react';\nimport { StoreContext } from '../contexts/StoreContext';\n\nconst Checkout = () =>{\n  const {cart, showModal} = useContext(StoreContext);\n  return (\n    <div className=\"row footer flex\">\n      <div className=\"col-3 col-s-1\" />\n      <div className=\"col-3 col-s-5\" style={{backgroundColor: \"pink\", fontSize: 20, fontWeight: 700, color: \"black\"}}>\n        <div>\n          <span>Qty </span><span>{cart.quantity}</span>\n        </div>\n        <div>\n          <span>Total </span><span>{cart.totalAmount}</span>\n        </div>\n      </div>\n      <div className=\"col-3 col-s-5\" style={{backgroundColor: \"pink\"}}>\n        <button className=\"button\" onClick={showModal}>Check Out</button>\n      </div>\n      <div className=\"col-3 col-s-1\" />\n    </div>\n  );\n}\n  \n  export default Checkout;","import React, { useContext } from 'react';\nimport { StoreContext } from '../contexts/StoreContext';\n\nconst Modal = ()=>{\n  const {displayModal, cart, closeModal} = useContext(StoreContext);\n  return (\n    <div id=\"myModal\" className=\"modal\" style={{display: displayModal? \"block\" : \"none\" }}>\n      <div className=\"modal-content\">\n        <span className=\"close\" onClick={closeModal}>&times;</span>\n        <p className=\"align-center\">Total Amount: {cart.totalAmount}</p>\n        <p className=\"align-center\">Transaction Successful!!!</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;","import React from 'react';\nimport ProductsList from './components/ProductsList';\nimport StoreContextProvider from './contexts/StoreContext';\nimport Checkout from './components/Checkout';\nimport Modal from './components/Modal';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <StoreContextProvider>\n      <ProductsList />\n      <Checkout />\n      <Modal />\n    </StoreContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}